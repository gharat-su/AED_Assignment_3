/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package main.java.com.coursera.userinterface.workareas.facultyrole;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import main.java.com.coursera.auth.AuthManager;
import main.java.com.coursera.business.Course;
import main.java.com.coursera.coursemanagement.CourseList;
import main.java.com.coursera.usermanagement.UserList;
import main.java.com.coursera.users.Faculty;
import main.java.com.coursera.users.User;

/**
 *
 * @author sghar
 */
public class ModifyCourseJPanel extends javax.swing.JPanel {

    private javax.swing.JPanel CardSequencePanel;
    private UserList uList;
    private CourseList cList;
    private AuthManager authManager;
    private User loggedInUser;
    private int professorId; // Add professorId variable

    /**
     * Creates new form ModifyCourseJPanel
     *
     * @param mcjp
     */
    public ModifyCourseJPanel(JPanel mcjp, CourseList cList, UserList uList, AuthManager authManager, int professorId) {
        initComponents();
        System.out.println(mcjp + " " + cList + " " + uList + " " + authManager);
        this.CardSequencePanel = mcjp;
        this.cList = cList;
        this.uList = uList;
        this.authManager = authManager;
        //this.loggedInUser = authManager.getLoggedInUser();
        this.professorId = professorId;
        populateCoursesTable(); // Call this method to populate the table.

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBacklog = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CoursesJTable = new javax.swing.JTable();
        btnUpdateCourseDetails = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        btnBacklog.setBackground(new java.awt.Color(212, 31, 47));
        btnBacklog.setForeground(new java.awt.Color(255, 255, 255));
        btnBacklog.setText("<<Back");
        btnBacklog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBacklogActionPerformed(evt);
            }
        });

        CoursesJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Title", "Assigned Professor", "Assigned Credits", "Capacity", "Start Date", "End Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(CoursesJTable);

        btnUpdateCourseDetails.setBackground(new java.awt.Color(212, 31, 47));
        btnUpdateCourseDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateCourseDetails.setText("Update Course Details");
        btnUpdateCourseDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCourseDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 673, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBacklog)
                            .addComponent(btnUpdateCourseDetails))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBacklog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdateCourseDetails)
                .addContainerGap(56, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBacklogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBacklogActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.add(new FacultyJPanel(CardSequencePanel, cList, uList, authManager, professorId));
        CardSequencePanel.remove(this); // Remove the current panel
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel); // Show the previous panel
    }//GEN-LAST:event_btnBacklogActionPerformed

    private void btnUpdateCourseDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCourseDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = CoursesJTable.getSelectedRow();

        if (selectedRow == -1) {
            // No course selected, show an error message
            JOptionPane.showMessageDialog(this, "No course selected. Please select a course to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int courseId = (int) CoursesJTable.getValueAt(selectedRow, 0); // Course ID is in the first column
        int newAssignedCredits = (int) CoursesJTable.getValueAt(selectedRow, 3); // Assigned Credits in the 4th column
        String newCourseName = (String) CoursesJTable.getValueAt(selectedRow, 1); // Course Name in the second column
        String newStartDate = (String) CoursesJTable.getValueAt(selectedRow, 5); // Start Date in the 6th column
        String newEndDate = (String) CoursesJTable.getValueAt(selectedRow, 6); // End Date in the 7th column
        int newCapacity = (int) CoursesJTable.getValueAt(selectedRow, 4); // Capacity in the 5th column

        System.out.println(courseId + " " + newCourseName + " " + newStartDate + " " + newEndDate + " " + newCapacity + "Data");
        Course course = cList.getCourseById(courseId);

        if (course != null) {
            boolean success = true;

            if (!isValidDate(newStartDate)) {
                // Acknowledge and prevent the update
                JOptionPane.showMessageDialog(this, "Invalid start date format. Please enter a valid date in the dd/mm/yyyy format.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!isValidDate(newEndDate)) {
                // Acknowledge and prevent the update
                JOptionPane.showMessageDialog(this, "Invalid end date format. Please enter a valid date in the dd/mm/yyyy format.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (newCapacity < 0) {
                // Capacity cannot be negative, acknowledge and prevent the update
                JOptionPane.showMessageDialog(this, "Capacity cannot be negative. Please enter a valid capacity.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!cList.updateCourseName(courseId, newCourseName)) {
                success = false;
            }

            if (!cList.updateCourseDates(courseId, newStartDate, newEndDate)) {
                success = false;
            }

            if (!cList.updateCourseCapacity(courseId, newCapacity)) {
                success = false;
            }
            // Update the assigned credits
            if (!cList.updateAssignedCredits(courseId, newAssignedCredits)) {
                success = false;
            }

            if (success) {
                // Show a success message or update the table with the new course details

                populateCoursesTable();
                JOptionPane.showMessageDialog(this, "Course details updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                printCourseList(cList.getAllCourses());
            } else {
                // Show an error message if any updates failed
                JOptionPane.showMessageDialog(this, "Course details update failed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnUpdateCourseDetailsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CoursesJTable;
    private javax.swing.JButton btnBacklog;
    private javax.swing.JButton btnUpdateCourseDetails;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void populateCoursesTable() {
        DefaultTableModel model = (DefaultTableModel) CoursesJTable.getModel();
        model.setRowCount(0); // Clear the table

        if (professorId != 0) {
            for (Course course : cList.getAllCourses()) {
                System.out.println("Inside for loop");

                Faculty professor = course.findProfessorById(professorId, uList); // Use the 'findProfessorById' method to get the professor// Get the professor
                System.out.println(professor + "professor");
                System.out.println(professor.getUserID() + " " + this.professorId);
                if (professor != null && professor.getUserID() == professorId) {
                    System.out.println("Inside the if block");
                    model.addRow(new Object[]{
                        course.getCourseId(),
                        course.getCourseName(),
                        professor.getFullName(), // Use the 'professor' object to access properties
                        course.getAssignedCredits(),
                        course.getMaxCapacity(),
                        course.getCourseStartDate(),
                        course.getCourseEndDate()
                    });
                }
            }
        }
    }

    private boolean isValidDate(String date) {
        String datePattern = "\\d{2}/\\d{2}/\\d{4}"; // Pattern for "dd/mm/yyyy" format
        Pattern pattern = Pattern.compile(datePattern);
        Matcher matcher = pattern.matcher(date);
        return matcher.matches();
    }

    public void printCourseList(ArrayList<Course> courseList) {
        System.out.println("Course List:");
        for (Course course : courseList) {
            System.out.println("Course ID: " + course.getCourseId());
            System.out.println("Course Name: " + course.getCourseName());
            System.out.println("Professor ID: " + course.getProfessorId()); // Display the professor's ID
            System.out.println("Assigned Credits: " + course.getAssignedCredits());
            System.out.println("Max Capacity: " + course.getMaxCapacity());
            System.out.println("Start Date: " + course.getCourseStartDate());
            System.out.println("End Date: " + course.getCourseEndDate());
            System.out.println("----------------------------------------");
        }
    }
}
